// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: silc.proto

#include "silc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_silc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedDoubleMeta_silc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_silc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedFloatMeta_silc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_silc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedSInt32Meta_silc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_silc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedSInt64Meta_silc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_silc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedStringMeta_silc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_silc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedUInt32Meta_silc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_silc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedUInt64Meta_silc_2eproto;
namespace SILCProtobuf {
class RepeatedStringMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepeatedStringMeta> _instance;
} _RepeatedStringMeta_default_instance_;
class RepeatedDoubleMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepeatedDoubleMeta> _instance;
} _RepeatedDoubleMeta_default_instance_;
class RepeatedFloatMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepeatedFloatMeta> _instance;
} _RepeatedFloatMeta_default_instance_;
class RepeatedSInt64MetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepeatedSInt64Meta> _instance;
} _RepeatedSInt64Meta_default_instance_;
class RepeatedUInt64MetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepeatedUInt64Meta> _instance;
} _RepeatedUInt64Meta_default_instance_;
class RepeatedSInt32MetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepeatedSInt32Meta> _instance;
} _RepeatedSInt32Meta_default_instance_;
class RepeatedUInt32MetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepeatedUInt32Meta> _instance;
} _RepeatedUInt32Meta_default_instance_;
class MetaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaData> _instance;
} _MetaData_default_instance_;
}  // namespace SILCProtobuf
static void InitDefaultsscc_info_MetaData_silc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SILCProtobuf::_MetaData_default_instance_;
    new (ptr) ::SILCProtobuf::MetaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SILCProtobuf::MetaData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MetaData_silc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_MetaData_silc_2eproto}, {
      &scc_info_RepeatedStringMeta_silc_2eproto.base,
      &scc_info_RepeatedDoubleMeta_silc_2eproto.base,
      &scc_info_RepeatedFloatMeta_silc_2eproto.base,
      &scc_info_RepeatedSInt64Meta_silc_2eproto.base,
      &scc_info_RepeatedUInt64Meta_silc_2eproto.base,
      &scc_info_RepeatedSInt32Meta_silc_2eproto.base,
      &scc_info_RepeatedUInt32Meta_silc_2eproto.base,}};

static void InitDefaultsscc_info_RepeatedDoubleMeta_silc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SILCProtobuf::_RepeatedDoubleMeta_default_instance_;
    new (ptr) ::SILCProtobuf::RepeatedDoubleMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SILCProtobuf::RepeatedDoubleMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedDoubleMeta_silc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RepeatedDoubleMeta_silc_2eproto}, {}};

static void InitDefaultsscc_info_RepeatedFloatMeta_silc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SILCProtobuf::_RepeatedFloatMeta_default_instance_;
    new (ptr) ::SILCProtobuf::RepeatedFloatMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SILCProtobuf::RepeatedFloatMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedFloatMeta_silc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RepeatedFloatMeta_silc_2eproto}, {}};

static void InitDefaultsscc_info_RepeatedSInt32Meta_silc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SILCProtobuf::_RepeatedSInt32Meta_default_instance_;
    new (ptr) ::SILCProtobuf::RepeatedSInt32Meta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SILCProtobuf::RepeatedSInt32Meta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedSInt32Meta_silc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RepeatedSInt32Meta_silc_2eproto}, {}};

static void InitDefaultsscc_info_RepeatedSInt64Meta_silc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SILCProtobuf::_RepeatedSInt64Meta_default_instance_;
    new (ptr) ::SILCProtobuf::RepeatedSInt64Meta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SILCProtobuf::RepeatedSInt64Meta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedSInt64Meta_silc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RepeatedSInt64Meta_silc_2eproto}, {}};

static void InitDefaultsscc_info_RepeatedStringMeta_silc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SILCProtobuf::_RepeatedStringMeta_default_instance_;
    new (ptr) ::SILCProtobuf::RepeatedStringMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SILCProtobuf::RepeatedStringMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedStringMeta_silc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RepeatedStringMeta_silc_2eproto}, {}};

static void InitDefaultsscc_info_RepeatedUInt32Meta_silc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SILCProtobuf::_RepeatedUInt32Meta_default_instance_;
    new (ptr) ::SILCProtobuf::RepeatedUInt32Meta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SILCProtobuf::RepeatedUInt32Meta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedUInt32Meta_silc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RepeatedUInt32Meta_silc_2eproto}, {}};

static void InitDefaultsscc_info_RepeatedUInt64Meta_silc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SILCProtobuf::_RepeatedUInt64Meta_default_instance_;
    new (ptr) ::SILCProtobuf::RepeatedUInt64Meta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SILCProtobuf::RepeatedUInt64Meta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedUInt64Meta_silc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RepeatedUInt64Meta_silc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_silc_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_silc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_silc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_silc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedStringMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedStringMeta, id_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedStringMeta, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedDoubleMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedDoubleMeta, id_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedDoubleMeta, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedFloatMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedFloatMeta, id_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedFloatMeta, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedSInt64Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedSInt64Meta, id_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedSInt64Meta, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedUInt64Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedUInt64Meta, id_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedUInt64Meta, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedSInt32Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedSInt32Meta, id_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedSInt32Meta, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedUInt32Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedUInt32Meta, id_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::RepeatedUInt32Meta, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::MetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::MetaData, repeated_string_meta_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::MetaData, repeated_double_meta_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::MetaData, repeated_float_meta_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::MetaData, repeated_sint64_meta_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::MetaData, repeated_uint64_meta_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::MetaData, repeated_sint32_meta_),
  PROTOBUF_FIELD_OFFSET(::SILCProtobuf::MetaData, repeated_uint32_meta_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SILCProtobuf::RepeatedStringMeta)},
  { 7, -1, sizeof(::SILCProtobuf::RepeatedDoubleMeta)},
  { 14, -1, sizeof(::SILCProtobuf::RepeatedFloatMeta)},
  { 21, -1, sizeof(::SILCProtobuf::RepeatedSInt64Meta)},
  { 28, -1, sizeof(::SILCProtobuf::RepeatedUInt64Meta)},
  { 35, -1, sizeof(::SILCProtobuf::RepeatedSInt32Meta)},
  { 42, -1, sizeof(::SILCProtobuf::RepeatedUInt32Meta)},
  { 49, -1, sizeof(::SILCProtobuf::MetaData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SILCProtobuf::_RepeatedStringMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SILCProtobuf::_RepeatedDoubleMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SILCProtobuf::_RepeatedFloatMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SILCProtobuf::_RepeatedSInt64Meta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SILCProtobuf::_RepeatedUInt64Meta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SILCProtobuf::_RepeatedSInt32Meta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SILCProtobuf::_RepeatedUInt32Meta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SILCProtobuf::_MetaData_default_instance_),
};

const char descriptor_table_protodef_silc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nsilc.proto\022\014SILCProtobuf\".\n\022RepeatedSt"
  "ringMeta\022\n\n\002id\030\001 \001(\t\022\014\n\004data\030\002 \003(\t\"2\n\022Re"
  "peatedDoubleMeta\022\n\n\002id\030\001 \001(\t\022\020\n\004data\030\002 \003"
  "(\001B\002\020\001\"1\n\021RepeatedFloatMeta\022\n\n\002id\030\001 \001(\t\022"
  "\020\n\004data\030\002 \003(\002B\002\020\001\"2\n\022RepeatedSInt64Meta\022"
  "\n\n\002id\030\001 \001(\t\022\020\n\004data\030\002 \003(\022B\002\020\001\"2\n\022Repeate"
  "dUInt64Meta\022\n\n\002id\030\001 \001(\t\022\020\n\004data\030\002 \003(\004B\002\020"
  "\001\"2\n\022RepeatedSInt32Meta\022\n\n\002id\030\001 \001(\t\022\020\n\004d"
  "ata\030\002 \003(\021B\002\020\001\"2\n\022RepeatedUInt32Meta\022\n\n\002i"
  "d\030\001 \001(\t\022\020\n\004data\030\002 \003(\rB\002\020\001\"\310\003\n\010MetaData\022>"
  "\n\024repeated_string_meta\030\001 \003(\0132 .SILCProto"
  "buf.RepeatedStringMeta\022>\n\024repeated_doubl"
  "e_meta\030\002 \003(\0132 .SILCProtobuf.RepeatedDoub"
  "leMeta\022<\n\023repeated_float_meta\030\003 \003(\0132\037.SI"
  "LCProtobuf.RepeatedFloatMeta\022>\n\024repeated"
  "_sint64_meta\030\004 \003(\0132 .SILCProtobuf.Repeat"
  "edSInt64Meta\022>\n\024repeated_uint64_meta\030\005 \003"
  "(\0132 .SILCProtobuf.RepeatedUInt64Meta\022>\n\024"
  "repeated_sint32_meta\030\006 \003(\0132 .SILCProtobu"
  "f.RepeatedSInt32Meta\022>\n\024repeated_uint32_"
  "meta\030\007 \003(\0132 .SILCProtobuf.RepeatedUInt32"
  "Metab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_silc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_silc_2eproto_sccs[8] = {
  &scc_info_MetaData_silc_2eproto.base,
  &scc_info_RepeatedDoubleMeta_silc_2eproto.base,
  &scc_info_RepeatedFloatMeta_silc_2eproto.base,
  &scc_info_RepeatedSInt32Meta_silc_2eproto.base,
  &scc_info_RepeatedSInt64Meta_silc_2eproto.base,
  &scc_info_RepeatedStringMeta_silc_2eproto.base,
  &scc_info_RepeatedUInt32Meta_silc_2eproto.base,
  &scc_info_RepeatedUInt64Meta_silc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_silc_2eproto_once;
static bool descriptor_table_silc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_silc_2eproto = {
  &descriptor_table_silc_2eproto_initialized, descriptor_table_protodef_silc_2eproto, "silc.proto", 852,
  &descriptor_table_silc_2eproto_once, descriptor_table_silc_2eproto_sccs, descriptor_table_silc_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_silc_2eproto::offsets,
  file_level_metadata_silc_2eproto, 8, file_level_enum_descriptors_silc_2eproto, file_level_service_descriptors_silc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_silc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_silc_2eproto), true);
namespace SILCProtobuf {

// ===================================================================

void RepeatedStringMeta::InitAsDefaultInstance() {
}
class RepeatedStringMeta::_Internal {
 public:
};

RepeatedStringMeta::RepeatedStringMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SILCProtobuf.RepeatedStringMeta)
}
RepeatedStringMeta::RepeatedStringMeta(const RepeatedStringMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:SILCProtobuf.RepeatedStringMeta)
}

void RepeatedStringMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RepeatedStringMeta_silc_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RepeatedStringMeta::~RepeatedStringMeta() {
  // @@protoc_insertion_point(destructor:SILCProtobuf.RepeatedStringMeta)
  SharedDtor();
}

void RepeatedStringMeta::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RepeatedStringMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepeatedStringMeta& RepeatedStringMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepeatedStringMeta_silc_2eproto.base);
  return *internal_default_instance();
}


void RepeatedStringMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:SILCProtobuf.RepeatedStringMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RepeatedStringMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SILCProtobuf.RepeatedStringMeta.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SILCProtobuf.RepeatedStringMeta.data"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepeatedStringMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SILCProtobuf.RepeatedStringMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SILCProtobuf.RepeatedStringMeta.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated string data = 2;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SILCProtobuf.RepeatedStringMeta.data");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SILCProtobuf.RepeatedStringMeta)
  return target;
}

size_t RepeatedStringMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SILCProtobuf.RepeatedStringMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      data_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedStringMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SILCProtobuf.RepeatedStringMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatedStringMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RepeatedStringMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SILCProtobuf.RepeatedStringMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SILCProtobuf.RepeatedStringMeta)
    MergeFrom(*source);
  }
}

void RepeatedStringMeta::MergeFrom(const RepeatedStringMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SILCProtobuf.RepeatedStringMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void RepeatedStringMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SILCProtobuf.RepeatedStringMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedStringMeta::CopyFrom(const RepeatedStringMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SILCProtobuf.RepeatedStringMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedStringMeta::IsInitialized() const {
  return true;
}

void RepeatedStringMeta::InternalSwap(RepeatedStringMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedStringMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RepeatedDoubleMeta::InitAsDefaultInstance() {
}
class RepeatedDoubleMeta::_Internal {
 public:
};

RepeatedDoubleMeta::RepeatedDoubleMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SILCProtobuf.RepeatedDoubleMeta)
}
RepeatedDoubleMeta::RepeatedDoubleMeta(const RepeatedDoubleMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:SILCProtobuf.RepeatedDoubleMeta)
}

void RepeatedDoubleMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RepeatedDoubleMeta_silc_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RepeatedDoubleMeta::~RepeatedDoubleMeta() {
  // @@protoc_insertion_point(destructor:SILCProtobuf.RepeatedDoubleMeta)
  SharedDtor();
}

void RepeatedDoubleMeta::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RepeatedDoubleMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepeatedDoubleMeta& RepeatedDoubleMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepeatedDoubleMeta_silc_2eproto.base);
  return *internal_default_instance();
}


void RepeatedDoubleMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:SILCProtobuf.RepeatedDoubleMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RepeatedDoubleMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SILCProtobuf.RepeatedDoubleMeta.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepeatedDoubleMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SILCProtobuf.RepeatedDoubleMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SILCProtobuf.RepeatedDoubleMeta.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated double data = 2 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SILCProtobuf.RepeatedDoubleMeta)
  return target;
}

size_t RepeatedDoubleMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SILCProtobuf.RepeatedDoubleMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedDoubleMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SILCProtobuf.RepeatedDoubleMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatedDoubleMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RepeatedDoubleMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SILCProtobuf.RepeatedDoubleMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SILCProtobuf.RepeatedDoubleMeta)
    MergeFrom(*source);
  }
}

void RepeatedDoubleMeta::MergeFrom(const RepeatedDoubleMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SILCProtobuf.RepeatedDoubleMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void RepeatedDoubleMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SILCProtobuf.RepeatedDoubleMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedDoubleMeta::CopyFrom(const RepeatedDoubleMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SILCProtobuf.RepeatedDoubleMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedDoubleMeta::IsInitialized() const {
  return true;
}

void RepeatedDoubleMeta::InternalSwap(RepeatedDoubleMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedDoubleMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RepeatedFloatMeta::InitAsDefaultInstance() {
}
class RepeatedFloatMeta::_Internal {
 public:
};

RepeatedFloatMeta::RepeatedFloatMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SILCProtobuf.RepeatedFloatMeta)
}
RepeatedFloatMeta::RepeatedFloatMeta(const RepeatedFloatMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:SILCProtobuf.RepeatedFloatMeta)
}

void RepeatedFloatMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RepeatedFloatMeta_silc_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RepeatedFloatMeta::~RepeatedFloatMeta() {
  // @@protoc_insertion_point(destructor:SILCProtobuf.RepeatedFloatMeta)
  SharedDtor();
}

void RepeatedFloatMeta::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RepeatedFloatMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepeatedFloatMeta& RepeatedFloatMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepeatedFloatMeta_silc_2eproto.base);
  return *internal_default_instance();
}


void RepeatedFloatMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:SILCProtobuf.RepeatedFloatMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RepeatedFloatMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SILCProtobuf.RepeatedFloatMeta.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepeatedFloatMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SILCProtobuf.RepeatedFloatMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SILCProtobuf.RepeatedFloatMeta.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated float data = 2 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SILCProtobuf.RepeatedFloatMeta)
  return target;
}

size_t RepeatedFloatMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SILCProtobuf.RepeatedFloatMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedFloatMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SILCProtobuf.RepeatedFloatMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatedFloatMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RepeatedFloatMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SILCProtobuf.RepeatedFloatMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SILCProtobuf.RepeatedFloatMeta)
    MergeFrom(*source);
  }
}

void RepeatedFloatMeta::MergeFrom(const RepeatedFloatMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SILCProtobuf.RepeatedFloatMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void RepeatedFloatMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SILCProtobuf.RepeatedFloatMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedFloatMeta::CopyFrom(const RepeatedFloatMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SILCProtobuf.RepeatedFloatMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedFloatMeta::IsInitialized() const {
  return true;
}

void RepeatedFloatMeta::InternalSwap(RepeatedFloatMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedFloatMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RepeatedSInt64Meta::InitAsDefaultInstance() {
}
class RepeatedSInt64Meta::_Internal {
 public:
};

RepeatedSInt64Meta::RepeatedSInt64Meta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SILCProtobuf.RepeatedSInt64Meta)
}
RepeatedSInt64Meta::RepeatedSInt64Meta(const RepeatedSInt64Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:SILCProtobuf.RepeatedSInt64Meta)
}

void RepeatedSInt64Meta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RepeatedSInt64Meta_silc_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RepeatedSInt64Meta::~RepeatedSInt64Meta() {
  // @@protoc_insertion_point(destructor:SILCProtobuf.RepeatedSInt64Meta)
  SharedDtor();
}

void RepeatedSInt64Meta::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RepeatedSInt64Meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepeatedSInt64Meta& RepeatedSInt64Meta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepeatedSInt64Meta_silc_2eproto.base);
  return *internal_default_instance();
}


void RepeatedSInt64Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:SILCProtobuf.RepeatedSInt64Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RepeatedSInt64Meta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SILCProtobuf.RepeatedSInt64Meta.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepeatedSInt64Meta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SILCProtobuf.RepeatedSInt64Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SILCProtobuf.RepeatedSInt64Meta.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated sint64 data = 2 [packed = true];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          2, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SILCProtobuf.RepeatedSInt64Meta)
  return target;
}

size_t RepeatedSInt64Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SILCProtobuf.RepeatedSInt64Meta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint64 data = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedSInt64Meta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SILCProtobuf.RepeatedSInt64Meta)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatedSInt64Meta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RepeatedSInt64Meta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SILCProtobuf.RepeatedSInt64Meta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SILCProtobuf.RepeatedSInt64Meta)
    MergeFrom(*source);
  }
}

void RepeatedSInt64Meta::MergeFrom(const RepeatedSInt64Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SILCProtobuf.RepeatedSInt64Meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void RepeatedSInt64Meta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SILCProtobuf.RepeatedSInt64Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedSInt64Meta::CopyFrom(const RepeatedSInt64Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SILCProtobuf.RepeatedSInt64Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedSInt64Meta::IsInitialized() const {
  return true;
}

void RepeatedSInt64Meta::InternalSwap(RepeatedSInt64Meta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedSInt64Meta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RepeatedUInt64Meta::InitAsDefaultInstance() {
}
class RepeatedUInt64Meta::_Internal {
 public:
};

RepeatedUInt64Meta::RepeatedUInt64Meta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SILCProtobuf.RepeatedUInt64Meta)
}
RepeatedUInt64Meta::RepeatedUInt64Meta(const RepeatedUInt64Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:SILCProtobuf.RepeatedUInt64Meta)
}

void RepeatedUInt64Meta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RepeatedUInt64Meta_silc_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RepeatedUInt64Meta::~RepeatedUInt64Meta() {
  // @@protoc_insertion_point(destructor:SILCProtobuf.RepeatedUInt64Meta)
  SharedDtor();
}

void RepeatedUInt64Meta::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RepeatedUInt64Meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepeatedUInt64Meta& RepeatedUInt64Meta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepeatedUInt64Meta_silc_2eproto.base);
  return *internal_default_instance();
}


void RepeatedUInt64Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:SILCProtobuf.RepeatedUInt64Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RepeatedUInt64Meta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SILCProtobuf.RepeatedUInt64Meta.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepeatedUInt64Meta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SILCProtobuf.RepeatedUInt64Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SILCProtobuf.RepeatedUInt64Meta.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated uint64 data = 2 [packed = true];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SILCProtobuf.RepeatedUInt64Meta)
  return target;
}

size_t RepeatedUInt64Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SILCProtobuf.RepeatedUInt64Meta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 data = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedUInt64Meta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SILCProtobuf.RepeatedUInt64Meta)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatedUInt64Meta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RepeatedUInt64Meta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SILCProtobuf.RepeatedUInt64Meta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SILCProtobuf.RepeatedUInt64Meta)
    MergeFrom(*source);
  }
}

void RepeatedUInt64Meta::MergeFrom(const RepeatedUInt64Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SILCProtobuf.RepeatedUInt64Meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void RepeatedUInt64Meta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SILCProtobuf.RepeatedUInt64Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedUInt64Meta::CopyFrom(const RepeatedUInt64Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SILCProtobuf.RepeatedUInt64Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedUInt64Meta::IsInitialized() const {
  return true;
}

void RepeatedUInt64Meta::InternalSwap(RepeatedUInt64Meta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedUInt64Meta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RepeatedSInt32Meta::InitAsDefaultInstance() {
}
class RepeatedSInt32Meta::_Internal {
 public:
};

RepeatedSInt32Meta::RepeatedSInt32Meta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SILCProtobuf.RepeatedSInt32Meta)
}
RepeatedSInt32Meta::RepeatedSInt32Meta(const RepeatedSInt32Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:SILCProtobuf.RepeatedSInt32Meta)
}

void RepeatedSInt32Meta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RepeatedSInt32Meta_silc_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RepeatedSInt32Meta::~RepeatedSInt32Meta() {
  // @@protoc_insertion_point(destructor:SILCProtobuf.RepeatedSInt32Meta)
  SharedDtor();
}

void RepeatedSInt32Meta::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RepeatedSInt32Meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepeatedSInt32Meta& RepeatedSInt32Meta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepeatedSInt32Meta_silc_2eproto.base);
  return *internal_default_instance();
}


void RepeatedSInt32Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:SILCProtobuf.RepeatedSInt32Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RepeatedSInt32Meta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SILCProtobuf.RepeatedSInt32Meta.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepeatedSInt32Meta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SILCProtobuf.RepeatedSInt32Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SILCProtobuf.RepeatedSInt32Meta.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated sint32 data = 2 [packed = true];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          2, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SILCProtobuf.RepeatedSInt32Meta)
  return target;
}

size_t RepeatedSInt32Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SILCProtobuf.RepeatedSInt32Meta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 data = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedSInt32Meta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SILCProtobuf.RepeatedSInt32Meta)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatedSInt32Meta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RepeatedSInt32Meta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SILCProtobuf.RepeatedSInt32Meta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SILCProtobuf.RepeatedSInt32Meta)
    MergeFrom(*source);
  }
}

void RepeatedSInt32Meta::MergeFrom(const RepeatedSInt32Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SILCProtobuf.RepeatedSInt32Meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void RepeatedSInt32Meta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SILCProtobuf.RepeatedSInt32Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedSInt32Meta::CopyFrom(const RepeatedSInt32Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SILCProtobuf.RepeatedSInt32Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedSInt32Meta::IsInitialized() const {
  return true;
}

void RepeatedSInt32Meta::InternalSwap(RepeatedSInt32Meta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedSInt32Meta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RepeatedUInt32Meta::InitAsDefaultInstance() {
}
class RepeatedUInt32Meta::_Internal {
 public:
};

RepeatedUInt32Meta::RepeatedUInt32Meta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SILCProtobuf.RepeatedUInt32Meta)
}
RepeatedUInt32Meta::RepeatedUInt32Meta(const RepeatedUInt32Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:SILCProtobuf.RepeatedUInt32Meta)
}

void RepeatedUInt32Meta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RepeatedUInt32Meta_silc_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RepeatedUInt32Meta::~RepeatedUInt32Meta() {
  // @@protoc_insertion_point(destructor:SILCProtobuf.RepeatedUInt32Meta)
  SharedDtor();
}

void RepeatedUInt32Meta::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RepeatedUInt32Meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepeatedUInt32Meta& RepeatedUInt32Meta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepeatedUInt32Meta_silc_2eproto.base);
  return *internal_default_instance();
}


void RepeatedUInt32Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:SILCProtobuf.RepeatedUInt32Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RepeatedUInt32Meta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SILCProtobuf.RepeatedUInt32Meta.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepeatedUInt32Meta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SILCProtobuf.RepeatedUInt32Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SILCProtobuf.RepeatedUInt32Meta.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated uint32 data = 2 [packed = true];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SILCProtobuf.RepeatedUInt32Meta)
  return target;
}

size_t RepeatedUInt32Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SILCProtobuf.RepeatedUInt32Meta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedUInt32Meta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SILCProtobuf.RepeatedUInt32Meta)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatedUInt32Meta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RepeatedUInt32Meta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SILCProtobuf.RepeatedUInt32Meta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SILCProtobuf.RepeatedUInt32Meta)
    MergeFrom(*source);
  }
}

void RepeatedUInt32Meta::MergeFrom(const RepeatedUInt32Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SILCProtobuf.RepeatedUInt32Meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void RepeatedUInt32Meta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SILCProtobuf.RepeatedUInt32Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedUInt32Meta::CopyFrom(const RepeatedUInt32Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SILCProtobuf.RepeatedUInt32Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedUInt32Meta::IsInitialized() const {
  return true;
}

void RepeatedUInt32Meta::InternalSwap(RepeatedUInt32Meta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedUInt32Meta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetaData::InitAsDefaultInstance() {
}
class MetaData::_Internal {
 public:
};

MetaData::MetaData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SILCProtobuf.MetaData)
}
MetaData::MetaData(const MetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      repeated_string_meta_(from.repeated_string_meta_),
      repeated_double_meta_(from.repeated_double_meta_),
      repeated_float_meta_(from.repeated_float_meta_),
      repeated_sint64_meta_(from.repeated_sint64_meta_),
      repeated_uint64_meta_(from.repeated_uint64_meta_),
      repeated_sint32_meta_(from.repeated_sint32_meta_),
      repeated_uint32_meta_(from.repeated_uint32_meta_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SILCProtobuf.MetaData)
}

void MetaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetaData_silc_2eproto.base);
}

MetaData::~MetaData() {
  // @@protoc_insertion_point(destructor:SILCProtobuf.MetaData)
  SharedDtor();
}

void MetaData::SharedDtor() {
}

void MetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaData& MetaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetaData_silc_2eproto.base);
  return *internal_default_instance();
}


void MetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:SILCProtobuf.MetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_string_meta_.Clear();
  repeated_double_meta_.Clear();
  repeated_float_meta_.Clear();
  repeated_sint64_meta_.Clear();
  repeated_uint64_meta_.Clear();
  repeated_sint32_meta_.Clear();
  repeated_uint32_meta_.Clear();
  _internal_metadata_.Clear();
}

const char* MetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SILCProtobuf.RepeatedStringMeta repeated_string_meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_string_meta(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SILCProtobuf.RepeatedDoubleMeta repeated_double_meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_double_meta(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SILCProtobuf.RepeatedFloatMeta repeated_float_meta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_float_meta(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SILCProtobuf.RepeatedSInt64Meta repeated_sint64_meta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_sint64_meta(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SILCProtobuf.RepeatedUInt64Meta repeated_uint64_meta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_uint64_meta(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SILCProtobuf.RepeatedSInt32Meta repeated_sint32_meta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_sint32_meta(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SILCProtobuf.RepeatedUInt32Meta repeated_uint32_meta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_uint32_meta(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SILCProtobuf.MetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SILCProtobuf.RepeatedStringMeta repeated_string_meta = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_string_meta_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_repeated_string_meta(i), target, stream);
  }

  // repeated .SILCProtobuf.RepeatedDoubleMeta repeated_double_meta = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_double_meta_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_repeated_double_meta(i), target, stream);
  }

  // repeated .SILCProtobuf.RepeatedFloatMeta repeated_float_meta = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_float_meta_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_repeated_float_meta(i), target, stream);
  }

  // repeated .SILCProtobuf.RepeatedSInt64Meta repeated_sint64_meta = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_sint64_meta_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_repeated_sint64_meta(i), target, stream);
  }

  // repeated .SILCProtobuf.RepeatedUInt64Meta repeated_uint64_meta = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_uint64_meta_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_repeated_uint64_meta(i), target, stream);
  }

  // repeated .SILCProtobuf.RepeatedSInt32Meta repeated_sint32_meta = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_sint32_meta_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_repeated_sint32_meta(i), target, stream);
  }

  // repeated .SILCProtobuf.RepeatedUInt32Meta repeated_uint32_meta = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_uint32_meta_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_repeated_uint32_meta(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SILCProtobuf.MetaData)
  return target;
}

size_t MetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SILCProtobuf.MetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SILCProtobuf.RepeatedStringMeta repeated_string_meta = 1;
  total_size += 1UL * this->_internal_repeated_string_meta_size();
  for (const auto& msg : this->repeated_string_meta_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SILCProtobuf.RepeatedDoubleMeta repeated_double_meta = 2;
  total_size += 1UL * this->_internal_repeated_double_meta_size();
  for (const auto& msg : this->repeated_double_meta_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SILCProtobuf.RepeatedFloatMeta repeated_float_meta = 3;
  total_size += 1UL * this->_internal_repeated_float_meta_size();
  for (const auto& msg : this->repeated_float_meta_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SILCProtobuf.RepeatedSInt64Meta repeated_sint64_meta = 4;
  total_size += 1UL * this->_internal_repeated_sint64_meta_size();
  for (const auto& msg : this->repeated_sint64_meta_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SILCProtobuf.RepeatedUInt64Meta repeated_uint64_meta = 5;
  total_size += 1UL * this->_internal_repeated_uint64_meta_size();
  for (const auto& msg : this->repeated_uint64_meta_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SILCProtobuf.RepeatedSInt32Meta repeated_sint32_meta = 6;
  total_size += 1UL * this->_internal_repeated_sint32_meta_size();
  for (const auto& msg : this->repeated_sint32_meta_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SILCProtobuf.RepeatedUInt32Meta repeated_uint32_meta = 7;
  total_size += 1UL * this->_internal_repeated_uint32_meta_size();
  for (const auto& msg : this->repeated_uint32_meta_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SILCProtobuf.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SILCProtobuf.MetaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SILCProtobuf.MetaData)
    MergeFrom(*source);
  }
}

void MetaData::MergeFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SILCProtobuf.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_string_meta_.MergeFrom(from.repeated_string_meta_);
  repeated_double_meta_.MergeFrom(from.repeated_double_meta_);
  repeated_float_meta_.MergeFrom(from.repeated_float_meta_);
  repeated_sint64_meta_.MergeFrom(from.repeated_sint64_meta_);
  repeated_uint64_meta_.MergeFrom(from.repeated_uint64_meta_);
  repeated_sint32_meta_.MergeFrom(from.repeated_sint32_meta_);
  repeated_uint32_meta_.MergeFrom(from.repeated_uint32_meta_);
}

void MetaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SILCProtobuf.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaData::CopyFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SILCProtobuf.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {
  return true;
}

void MetaData::InternalSwap(MetaData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  repeated_string_meta_.InternalSwap(&other->repeated_string_meta_);
  repeated_double_meta_.InternalSwap(&other->repeated_double_meta_);
  repeated_float_meta_.InternalSwap(&other->repeated_float_meta_);
  repeated_sint64_meta_.InternalSwap(&other->repeated_sint64_meta_);
  repeated_uint64_meta_.InternalSwap(&other->repeated_uint64_meta_);
  repeated_sint32_meta_.InternalSwap(&other->repeated_sint32_meta_);
  repeated_uint32_meta_.InternalSwap(&other->repeated_uint32_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SILCProtobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SILCProtobuf::RepeatedStringMeta* Arena::CreateMaybeMessage< ::SILCProtobuf::RepeatedStringMeta >(Arena* arena) {
  return Arena::CreateInternal< ::SILCProtobuf::RepeatedStringMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::SILCProtobuf::RepeatedDoubleMeta* Arena::CreateMaybeMessage< ::SILCProtobuf::RepeatedDoubleMeta >(Arena* arena) {
  return Arena::CreateInternal< ::SILCProtobuf::RepeatedDoubleMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::SILCProtobuf::RepeatedFloatMeta* Arena::CreateMaybeMessage< ::SILCProtobuf::RepeatedFloatMeta >(Arena* arena) {
  return Arena::CreateInternal< ::SILCProtobuf::RepeatedFloatMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::SILCProtobuf::RepeatedSInt64Meta* Arena::CreateMaybeMessage< ::SILCProtobuf::RepeatedSInt64Meta >(Arena* arena) {
  return Arena::CreateInternal< ::SILCProtobuf::RepeatedSInt64Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::SILCProtobuf::RepeatedUInt64Meta* Arena::CreateMaybeMessage< ::SILCProtobuf::RepeatedUInt64Meta >(Arena* arena) {
  return Arena::CreateInternal< ::SILCProtobuf::RepeatedUInt64Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::SILCProtobuf::RepeatedSInt32Meta* Arena::CreateMaybeMessage< ::SILCProtobuf::RepeatedSInt32Meta >(Arena* arena) {
  return Arena::CreateInternal< ::SILCProtobuf::RepeatedSInt32Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::SILCProtobuf::RepeatedUInt32Meta* Arena::CreateMaybeMessage< ::SILCProtobuf::RepeatedUInt32Meta >(Arena* arena) {
  return Arena::CreateInternal< ::SILCProtobuf::RepeatedUInt32Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::SILCProtobuf::MetaData* Arena::CreateMaybeMessage< ::SILCProtobuf::MetaData >(Arena* arena) {
  return Arena::CreateInternal< ::SILCProtobuf::MetaData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
