<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classTensor" kind="class" language="C++" prot="public">
    <compoundname>Tensor</compoundname>
    <basecompoundref refid="classTensorBase" prot="public" virt="non-virtual">TensorBase</basecompoundref>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classTensor_1a3dd289216b8e67d3a3a392380954df7f" prot="private" static="no" mutable="no">
        <type><ref refid="classMemoryList" kindref="compound">MemoryList</ref>&lt; T &gt;</type>
        <definition>MemoryList&lt;T&gt; Tensor&lt; T &gt;::_numeric_mem_list</definition>
        <argsstring></argsstring>
        <name>_numeric_mem_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory lists that are used to hold recursively allocated memory when a data pointer is requested and it does not exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="80" column="20" bodyfile="/Users/mellis/silc/include/tensor.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classTensor_1aa188558b2c42a796a12e22c41337f097" prot="private" static="no" mutable="no">
        <type><ref refid="classMemoryList" kindref="compound">MemoryList</ref>&lt; T * &gt;</type>
        <definition>MemoryList&lt;T*&gt; Tensor&lt; T &gt;::_ptr_mem_list</definition>
        <argsstring></argsstring>
        <name>_ptr_mem_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="81" column="20" bodyfile="/Users/mellis/silc/include/tensor.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classTensor_1a3cb27de09f00b04cdaa49cb685f19b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Tensor&lt; T &gt;::Tensor</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;type, void *data, const std::vector&lt; int &gt; &amp;dims)</argsstring>
        <name>Tensor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <briefdescription><para>The name used to reference the tensor </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
          <briefdescription><para>The data type of the tensor </para>
</briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
          <briefdescription><para>A c_ptr to the data of the tensor </para>
</briefdescription>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>dims</declname>
          <briefdescription><para>The dimensions of the data </para>
</briefdescription>
        </param>
        <briefdescription>
<para><ref refid="classTensor" kindref="compound">Tensor</ref> constructor using tensor data pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="18" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classTensor_1a0097cd1be32db437074ad9652587ba37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Tensor&lt; T &gt;::Tensor</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;type, const std::vector&lt; int &gt; &amp;dims, const std::string_view &amp;data_buf)</argsstring>
        <name>Tensor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <briefdescription><para>The name used to reference the tensor </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
          <briefdescription><para>The data type of the tensor </para>
</briefdescription>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>dims</declname>
          <briefdescription><para>The dimensions of the data </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>data_buf</declname>
          <briefdescription><para>The data buffer </para>
</briefdescription>
        </param>
        <briefdescription>
<para><ref refid="classTensor" kindref="compound">Tensor</ref> constructor using data bufffer without tensor data pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="25" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classTensor_1a23e5d94edf58d06ecf04f8cf3084cdc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Tensor&lt; T &gt;::~Tensor</definition>
        <argsstring>()</argsstring>
        <name>~Tensor</name>
        <briefdescription>
<para><ref refid="classTensor" kindref="compound">Tensor</ref> destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="32" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classTensor_1a21ba35c0d5b9f9d1cab4cbbb60f39501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Tensor&lt; T &gt;::Tensor</definition>
        <argsstring>(const Tensor&lt; T &gt; &amp;tensor)</argsstring>
        <name>Tensor</name>
        <param>
          <type>const <ref refid="classTensor" kindref="compound">Tensor</ref>&lt; T &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para><ref refid="classTensor" kindref="compound">Tensor</ref> copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="35" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classTensor_1a0e9875e5569cc399bbd9f3173f896c44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTensor" kindref="compound">Tensor</ref>&lt; T &gt; &amp;</type>
        <definition>Tensor&lt;T&gt;&amp; Tensor&lt; T &gt;::operator=</definition>
        <argsstring>(const Tensor&lt; T &gt; &amp;tensor)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classTensor" kindref="compound">Tensor</ref>&lt; T &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para><ref refid="classTensor" kindref="compound">Tensor</ref> copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="38" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classTensor_1a0811ae5d60eb66e07fbbb053c1a6fef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>virtual void* Tensor&lt; T &gt;::get_data</definition>
        <argsstring>()</argsstring>
        <name>get_data</name>
        <reimplements refid="classTensorBase_1aa1bb88089ea434e08b0dd08d4f399abf">get_data</reimplements>
        <briefdescription>
<para>Return a pointer to the tensor memory space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="41" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classTensor_1aa16fe1bab7a46d46ec7a7f08ff045fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Tensor&lt; T &gt;::fill_data_from_buf</definition>
        <argsstring>(void *data, std::vector&lt; int &gt; dims, const std::string &amp;type)</argsstring>
        <name>fill_data_from_buf</name>
        <reimplements refid="classTensorBase_1aa118cb5e0260e4a46aa291db56f68cce">fill_data_from_buf</reimplements>
        <param>
          <type>void *</type>
          <declname>data</declname>
          <briefdescription><para>Pointer to the allocated memory space </para>
</briefdescription>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>dims</declname>
          <briefdescription><para>The dimensions of the memory space </para>
</briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
          <briefdescription><para>The datatype of the allocated memory space </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Fill a user provided memory space with values from tensor buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="44" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classTensor_1acf98c050c11d0efd368ea41c78ae7d6d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Tensor&lt; T &gt;::_generate_data_buf</definition>
        <argsstring>()</argsstring>
        <name>_generate_data_buf</name>
        <reimplements refid="classTensorBase_1a87682414f7fdf0d8727af945cd3de6b6">_generate_data_buf</reimplements>
        <briefdescription>
<para>Function to generate the data buffer from the data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="52" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classTensor_1a6f33de4934a82edd1cd8d248984561e1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* Tensor&lt; T &gt;::_vals_to_buf</definition>
        <argsstring>(void *data, int *dims, int n_dims, void *buf)</argsstring>
        <name>_vals_to_buf</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
          <briefdescription><para>The data to copy to buf tensor </para>
</briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>dims</declname>
          <briefdescription><para>The dimensions of data </para>
</briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>n_dims</declname>
          <briefdescription><para>The number of dimensions in data </para>
</briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
          <briefdescription><para>The buffer to hold the data </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Function to copy values from tensor into buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="57" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classTensor_1a61be030714b52e5c161facc802c0acae" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tensor&lt; T &gt;::_buf_to_data</definition>
        <argsstring>(void *data, int *dims, int n_dims, int &amp;buf_position, void *buf)</argsstring>
        <name>_buf_to_data</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
          <briefdescription><para>The data array to copy into </para>
</briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>dims</declname>
          <briefdescription><para>The dimensions of data </para>
</briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>n_dims</declname>
          <briefdescription><para>The number of dimensions in data </para>
</briefdescription>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>buf_position</declname>
          <briefdescription><para>The current position of reading the buf </para>
</briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
          <briefdescription><para>The buf to read from </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Function to copy values from buffer into tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="64" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classTensor_1ae9bc0e28926417ca2110c05bdc87fc7f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tensor&lt; T &gt;::_allocate_data_memory</definition>
        <argsstring>(void **data, int *dims, int n_dims)</argsstring>
        <name>_allocate_data_memory</name>
        <param>
          <type>void **</type>
          <declname>data</declname>
          <briefdescription><para>A pointer to the pointer where data should be stored </para>
</briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>dims</declname>
          <briefdescription><para>An array of integer dimension values </para>
</briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>n_dims</declname>
          <briefdescription><para>The number of dimension left to iterate through </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Allocate memory that fits the tensor data dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mellis/silc/include/tensor.h" line="72" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>TensorBase</label>
        <link refid="classTensorBase"/>
      </node>
      <node id="1">
        <label>Tensor&lt; T &gt;</label>
        <link refid="classTensor"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>TensorBase</label>
        <link refid="classTensorBase"/>
      </node>
      <node id="1">
        <label>Tensor&lt; T &gt;</label>
        <link refid="classTensor"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/mellis/silc/include/tensor.h" line="13" column="1" bodyfile="/Users/mellis/silc/include/tensor.h" bodystart="14" bodyend="82"/>
    <listofallmembers>
      <member refid="classTensor_1ae9bc0e28926417ca2110c05bdc87fc7f" prot="private" virt="non-virtual"><scope>Tensor</scope><name>_allocate_data_memory</name></member>
      <member refid="classTensorBase_1ae0305960bb830007f1714ccc6c8fa08e" prot="protected" virt="non-virtual"><scope>Tensor</scope><name>_buf_size</name></member>
      <member refid="classTensor_1a61be030714b52e5c161facc802c0acae" prot="private" virt="non-virtual"><scope>Tensor</scope><name>_buf_to_data</name></member>
      <member refid="classTensorBase_1a7f9101d5f81e1916fead19a649d9361f" prot="protected" virt="non-virtual"><scope>Tensor</scope><name>_data</name></member>
      <member refid="classTensorBase_1ad31849c6a01547bd17b824cdaeeb0aa4" prot="protected" virt="non-virtual"><scope>Tensor</scope><name>_data_buf</name></member>
      <member refid="classTensorBase_1a4fe7f1ce098593a2093503322e68cfca" prot="protected" virt="non-virtual"><scope>Tensor</scope><name>_dims</name></member>
      <member refid="classTensor_1acf98c050c11d0efd368ea41c78ae7d6d" prot="protected" virt="virtual"><scope>Tensor</scope><name>_generate_data_buf</name></member>
      <member refid="classTensorBase_1a86239d1ed89d0b585b3711b5dc16cdcf" prot="protected" virt="non-virtual"><scope>Tensor</scope><name>_name</name></member>
      <member refid="classTensor_1a3dd289216b8e67d3a3a392380954df7f" prot="private" virt="non-virtual"><scope>Tensor</scope><name>_numeric_mem_list</name></member>
      <member refid="classTensor_1aa188558b2c42a796a12e22c41337f097" prot="private" virt="non-virtual"><scope>Tensor</scope><name>_ptr_mem_list</name></member>
      <member refid="classTensorBase_1a13ce4bdeb769d135afecdc7cf81c0ccc" prot="protected" virt="non-virtual"><scope>Tensor</scope><name>_type</name></member>
      <member refid="classTensor_1a6f33de4934a82edd1cd8d248984561e1" prot="private" virt="non-virtual"><scope>Tensor</scope><name>_vals_to_buf</name></member>
      <member refid="classTensor_1aa16fe1bab7a46d46ec7a7f08ff045fb7" prot="public" virt="virtual"><scope>Tensor</scope><name>fill_data_from_buf</name></member>
      <member refid="classTensor_1a0811ae5d60eb66e07fbbb053c1a6fef4" prot="public" virt="virtual"><scope>Tensor</scope><name>get_data</name></member>
      <member refid="classTensorBase_1afa93bf11b1aef571ddab18c62891d608" prot="public" virt="non-virtual"><scope>Tensor</scope><name>get_data_buf</name></member>
      <member refid="classTensorBase_1a4cfa95487e081775c820678b4740a9f5" prot="public" virt="non-virtual"><scope>Tensor</scope><name>get_tensor_dims</name></member>
      <member refid="classTensorBase_1ad92833eaa24003cf7f128aea38fb9b08" prot="public" virt="non-virtual"><scope>Tensor</scope><name>get_tensor_name</name></member>
      <member refid="classTensorBase_1a8afce1eb11ba39db0a101a69cab3ee4d" prot="public" virt="non-virtual"><scope>Tensor</scope><name>get_tensor_type</name></member>
      <member refid="classTensor_1a0e9875e5569cc399bbd9f3173f896c44" prot="public" virt="non-virtual"><scope>Tensor</scope><name>operator=</name></member>
      <member refid="classTensorBase_1aa8f244c776c5bd5591b1b68ff5a862eb" prot="public" virt="non-virtual" ambiguityscope="TensorBase::"><scope>Tensor</scope><name>operator=</name></member>
      <member refid="classTensor_1a3cb27de09f00b04cdaa49cb685f19b15" prot="public" virt="non-virtual"><scope>Tensor</scope><name>Tensor</name></member>
      <member refid="classTensor_1a0097cd1be32db437074ad9652587ba37" prot="public" virt="non-virtual"><scope>Tensor</scope><name>Tensor</name></member>
      <member refid="classTensor_1a21ba35c0d5b9f9d1cab4cbbb60f39501" prot="public" virt="non-virtual"><scope>Tensor</scope><name>Tensor</name></member>
      <member refid="classTensorBase_1a851fc0164d11d1f5b557f36822f0bed2" prot="public" virt="non-virtual"><scope>Tensor</scope><name>TensorBase</name></member>
      <member refid="classTensorBase_1a4ff5c8f5ca1c1c7cdca7f5eeef0f96bc" prot="public" virt="non-virtual"><scope>Tensor</scope><name>TensorBase</name></member>
      <member refid="classTensorBase_1a2863e3ec51eae563a4481015ca7ad8fd" prot="public" virt="non-virtual"><scope>Tensor</scope><name>TensorBase</name></member>
      <member refid="classTensor_1a23e5d94edf58d06ecf04f8cf3084cdc5" prot="public" virt="virtual"><scope>Tensor</scope><name>~Tensor</name></member>
      <member refid="classTensorBase_1a5bde72607795d571d31cfe56b0b24814" prot="public" virt="virtual"><scope>Tensor</scope><name>~TensorBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
